<?php
/**
 * ÂâçÁ´ØAPIË®∫Êñ∑ÊéßÂà∂Âô®
 * Â∞àÈñÄË®∫Êñ∑ÂâçÁ´ØÁôªÂÖ•Ë®ªÂÜäAPIÂïèÈ°å
 */

namespace app\controller;

use support\Response;
use think\facade\Db;

class FrontendDebugController
{
    /**
     * Ê™¢Êü•ÂâçÁ´ØAPIÁ´ØÈªûÈÖçÁΩÆ
     * Ë®™ÂïèË∑ØÂæëÔºö/frontend/checkapi
     */
    public function checkapi(): Response
    {
        $output = "";
        $output .= "=== ÂâçÁ´ØAPIÁ´ØÈªûË®∫Êñ∑ ===\n";
        $output .= "ÈñãÂßãÊôÇÈñìÔºö" . date('Y-m-d H:i:s') . "\n\n";

        try {
            // 1. Ê™¢Êü•Áî®Êà∂APIË∑ØÁî±ÊòØÂê¶Â≠òÂú®
            $output .= "üîç Ê≠•È©ü1ÔºöÊ™¢Êü•APIË∑ØÁî±ÈÖçÁΩÆ\n";
            
            // Ê™¢Êü•‰∏ªË¶ÅÁöÑAPIÁ´ØÈªû
            $apiEndpoints = [
                '/api/v1/user/login' => 'Áî®Êà∂ÁôªÂÖ•',
                '/api/v1/user/register' => 'Áî®Êà∂Ë®ªÂÜä', 
                '/api/v1/user/info' => 'Áç≤ÂèñÁî®Êà∂‰ø°ÊÅØ',
                '/api/v1/app/list' => 'Áç≤ÂèñÊáâÁî®ÂàóË°®',
                '/api/v1/scene/list' => 'Áç≤ÂèñÂ†¥ÊôØÂàóË°®'
            ];

            foreach ($apiEndpoints as $endpoint => $description) {
                $output .= "üìã {$description}: {$endpoint}\n";
            }

            // 2. Ê™¢Êü•Ë∑ØÁî±Êñá‰ª∂
            $output .= "\nüîç Ê≠•È©ü2ÔºöÊ™¢Êü•Ë∑ØÁî±Êñá‰ª∂ÈÖçÁΩÆ\n";
            $routeFiles = [
                'config/route.php' => '‰∏ªË∑ØÁî±ÈÖçÁΩÆ',
                'app/api/controller/UserController.php' => 'Áî®Êà∂ÊéßÂà∂Âô®',
                'app/api/controller/AppController.php' => 'ÊáâÁî®ÊéßÂà∂Âô®'
            ];

            foreach ($routeFiles as $file => $description) {
                $filePath = __DIR__ . '/../../' . $file;
                if (file_exists($filePath)) {
                    $output .= "‚úÖ {$description} Â≠òÂú®\n";
                } else {
                    $output .= "‚ùå {$description} ‰∏çÂ≠òÂú®: {$file}\n";
                }
            }

            // 3. Ê™¢Êü•Ë≥áÊñôÂ∫´ÈÄ£Êé•
            $output .= "\nüîç Ê≠•È©ü3ÔºöÊ™¢Êü•Ë≥áÊñôÂ∫´ÈÄ£Êé•\n";
            try {
                $result = Db::query("SELECT COUNT(*) as count FROM yc_user");
                $userCount = $result[0]->count ?? 0;
                $output .= "‚úÖ Ë≥áÊñôÂ∫´ÈÄ£Êé•Ê≠£Â∏∏ÔºåÁî®Êà∂Ë°®Ë®òÈåÑÊï∏Ôºö{$userCount}\n";
            } catch (\Exception $e) {
                $output .= "‚ùå Ë≥áÊñôÂ∫´ÈÄ£Êé•Â§±Êïó: " . $e->getMessage() . "\n";
            }

            $output .= "\nüìã ‰∏ã‰∏ÄÊ≠•ÔºöÂâµÂª∫Áº∫Â§±ÁöÑAPIÊéßÂà∂Âô®\n";
            $output .= "Ë®™ÂïèÔºöhttps://genhuman-digital-human.zeabur.app/frontend/createapi\n";

        } catch (\Exception $e) {
            $output .= "‚ùå Ë®∫Êñ∑Â§±Êïó: " . $e->getMessage() . "\n";
        }

        return new Response(200, [
            'Content-Type' => 'text/plain; charset=utf-8'
        ], $output);
    }

    /**
     * ÂâµÂª∫ÂâçÁ´ØÈúÄË¶ÅÁöÑAPIÊéßÂà∂Âô®
     * Ë®™ÂïèË∑ØÂæëÔºö/frontend/createapi
     */
    public function createapi(): Response
    {
        $output = "";
        $output .= "=== ÂâµÂª∫ÂâçÁ´ØAPIÊéßÂà∂Âô® ===\n";
        $output .= "ÈñãÂßãÊôÇÈñìÔºö" . date('Y-m-d H:i:s') . "\n\n";

        try {
            // 1. Á¢∫‰øùapiÁõÆÈåÑÂ≠òÂú®
            $apiDir = __DIR__ . '/../api/controller';
            if (!is_dir($apiDir)) {
                mkdir($apiDir, 0755, true);
                $output .= "‚úÖ ÂâµÂª∫APIÊéßÂà∂Âô®ÁõÆÈåÑ\n";
            } else {
                $output .= "‚ÑπÔ∏è  APIÊéßÂà∂Âô®ÁõÆÈåÑÂ∑≤Â≠òÂú®\n";
            }

            // 2. ÂâµÂª∫UserController
            $userControllerPath = $apiDir . '/UserController.php';
            if (!file_exists($userControllerPath)) {
                $userControllerCode = $this->getUserControllerCode();
                file_put_contents($userControllerPath, $userControllerCode);
                $output .= "‚úÖ ÂâµÂª∫UserControllerÊàêÂäü\n";
            } else {
                $output .= "‚ÑπÔ∏è  UserControllerÂ∑≤Â≠òÂú®\n";
            }

            // 3. ÂâµÂª∫AppController  
            $appControllerPath = $apiDir . '/AppController.php';
            if (!file_exists($appControllerPath)) {
                $appControllerCode = $this->getAppControllerCode();
                file_put_contents($appControllerPath, $appControllerCode);
                $output .= "‚úÖ ÂâµÂª∫AppControllerÊàêÂäü\n";
            } else {
                $output .= "‚ÑπÔ∏è  AppControllerÂ∑≤Â≠òÂú®\n";
            }

            // 4. Ê™¢Êü•Ë∑ØÁî±ÈÖçÁΩÆ
            $output .= "\nüîç Ê™¢Êü•Ë∑ØÁî±ÈÖçÁΩÆ...\n";
            $routePath = __DIR__ . '/../../config/route.php';
            if (file_exists($routePath)) {
                $output .= "‚úÖ Ë∑ØÁî±ÈÖçÁΩÆÊñá‰ª∂Â≠òÂú®\n";
            } else {
                $output .= "‚ùå Ë∑ØÁî±ÈÖçÁΩÆÊñá‰ª∂‰∏çÂ≠òÂú®ÔºåÈúÄË¶ÅÂâµÂª∫\n";
            }

            $output .= "\nüéâ APIÊéßÂà∂Âô®ÂâµÂª∫ÂÆåÊàêÔºÅ\n";
            $output .= "üìã Ê∏¨Ë©¶APIÁ´ØÈªûÔºö\n";
            $output .= "1. https://genhuman-digital-human.zeabur.app/api/v1/user/test\n";
            $output .= "2. https://genhuman-digital-human.zeabur.app/api/v1/app/list\n";
            $output .= "3. ÁÑ∂ÂæåÊ∏¨Ë©¶ÂâçÁ´ØÁôªÂÖ•ÂäüËÉΩ\n";

        } catch (\Exception $e) {
            $output .= "‚ùå ÂâµÂª∫Â§±Êïó: " . $e->getMessage() . "\n";
        }

        return new Response(200, [
            'Content-Type' => 'text/plain; charset=utf-8'
        ], $output);
    }

    /**
     * Ê∏¨Ë©¶APIÈüøÊáâÊ†ºÂºè
     * Ë®™ÂïèË∑ØÂæëÔºö/frontend/testapi
     */
    public function testapi(): Response
    {
        $output = "";
        $output .= "=== APIÈüøÊáâÊ†ºÂºèÊ∏¨Ë©¶ ===\n";
        $output .= "ÈñãÂßãÊôÇÈñìÔºö" . date('Y-m-d H:i:s') . "\n\n";

        // Ê∏¨Ë©¶Ê®ôÊ∫ñAPIÈüøÊáâÊ†ºÂºè
        $testData = [
            'code' => 200,
            'message' => 'success',
            'data' => [
                'user_id' => 1,
                'nickname' => 'Ê∏¨Ë©¶Áî®Êà∂',
                'avatar' => '/static/images/default-avatar.png',
                'token' => 'test_token_123456789'
            ]
        ];

        $output .= "üìã Ê®ôÊ∫ñAPIÈüøÊáâÊ†ºÂºèÔºö\n";
        $output .= json_encode($testData, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE) . "\n\n";

        $output .= "üîç ÂâçÁ´ØÊáâË©≤Ê™¢Êü•ÁöÑÈåØË™§Ôºö\n";
        $output .= "1. APIÁ´ØÈªûURLÊòØÂê¶Ê≠£Á¢∫\n";
        $output .= "2. Ë´ãÊ±ÇÊñπÊ≥ïÔºàGET/POSTÔºâÊòØÂê¶ÂåπÈÖç\n";
        $output .= "3. Ë´ãÊ±ÇÈ†≠ÊòØÂê¶ÂåÖÂê´ÂøÖË¶ÅÁöÑContent-Type\n";
        $output .= "4. ÈüøÊáâÊï∏ÊìöËôïÁêÜÊòØÂê¶Ê≠£Á¢∫\n";

        // Áõ¥Êé•ËøîÂõûJSONÊ†ºÂºèÁî®ÊñºÂâçÁ´ØÊ∏¨Ë©¶
        return new Response(200, [
            'Content-Type' => 'application/json; charset=utf-8'
        ], json_encode($testData, JSON_UNESCAPED_UNICODE));
    }

    /**
     * Áç≤ÂèñUserController‰ª£Á¢º
     */
    private function getUserControllerCode(): string
    {
        return '<?php
/**
 * ÂâçÁ´ØÁî®Êà∂APIÊéßÂà∂Âô®
 */

namespace app\api\controller;

use support\Request;
use support\Response;
use think\facade\Db;

class UserController
{
    /**
     * Áî®Êà∂ÁôªÂÖ•
     */
    public function login(Request $request): Response
    {
        try {
            $phone = $request->post("phone", "");
            $code = $request->post("code", "");
            $openid = $request->post("openid", "");

            // Á∞°ÂåñÁôªÂÖ•ÈÇèËºØ - Áõ¥Êé•ÈÄöÈÅéopenidÊàñphoneÁôªÂÖ•
            if (empty($openid) && empty($phone)) {
                return $this->jsonResponse(400, "Áº∫Â∞ëÁôªÂÖ•ÂèÉÊï∏");
            }

            // Êü•ÊâæÊàñÂâµÂª∫Áî®Êà∂
            $where = [];
            if (!empty($openid)) {
                $where["openid"] = $openid;
            } else {
                $where["phone"] = $phone;
            }

            $user = Db::table("yc_user")->where($where)->find();
            
            if (!$user) {
                // ÂâµÂª∫Êñ∞Áî®Êà∂
                $userData = [
                    "openid" => $openid,
                    "phone" => $phone,
                    "nickname" => "Áî®Êà∂" . substr($phone ?: $openid, -4),
                    "avatar" => "/static/images/default-avatar.png",
                    "status" => 1,
                    "register_type" => $openid ? "wechat" : "phone",
                    "create_time" => date("Y-m-d H:i:s"),
                    "update_time" => date("Y-m-d H:i:s")
                ];
                
                $userId = Db::table("yc_user")->insertGetId($userData);
                $user = array_merge($userData, ["id" => $userId]);
            }

            // Êõ¥Êñ∞ÊúÄÂæåÁôªÂÖ•ÊôÇÈñì
            Db::table("yc_user")->where("id", $user["id"])->update([
                "last_login_time" => date("Y-m-d H:i:s"),
                "update_time" => date("Y-m-d H:i:s")
            ]);

            // ÁîüÊàêtokenÔºàÁ∞°ÂåñÁâàÔºâ
            $token = "genhuman_" . $user["id"] . "_" . time();

            return $this->jsonResponse(200, "ÁôªÂÖ•ÊàêÂäü", [
                "user_id" => $user["id"],
                "nickname" => $user["nickname"],
                "avatar" => $user["avatar"],
                "phone" => $user["phone"],
                "token" => $token
            ]);

        } catch (\Exception $e) {
            return $this->jsonResponse(500, "ÁôªÂÖ•Â§±Êïó: " . $e->getMessage());
        }
    }

    /**
     * Áç≤ÂèñÁî®Êà∂‰ø°ÊÅØ
     */
    public function info(Request $request): Response
    {
        try {
            $userId = $request->get("user_id", 0);
            
            if (empty($userId)) {
                return $this->jsonResponse(400, "Áº∫Â∞ëÁî®Êà∂ID");
            }

            $user = Db::table("yc_user")->where("id", $userId)->find();
            
            if (!$user) {
                return $this->jsonResponse(404, "Áî®Êà∂‰∏çÂ≠òÂú®");
            }

            return $this->jsonResponse(200, "Áç≤ÂèñÊàêÂäü", [
                "user_id" => $user["id"],
                "nickname" => $user["nickname"],
                "avatar" => $user["avatar"],
                "phone" => $user["phone"]
            ]);

        } catch (\Exception $e) {
            return $this->jsonResponse(500, "Áç≤ÂèñÂ§±Êïó: " . $e->getMessage());
        }
    }

    /**
     * Ê∏¨Ë©¶APIÁ´ØÈªû
     */
    public function test(): Response
    {
        return $this->jsonResponse(200, "APIÁ´ØÈªûÊ≠£Â∏∏", [
            "server_time" => date("Y-m-d H:i:s"),
            "api_version" => "v1.0"
        ]);
    }

    /**
     * Áµ±‰∏ÄJSONÈüøÊáâÊ†ºÂºè
     */
    private function jsonResponse(int $code, string $message, array $data = []): Response
    {
        return new Response(200, [
            "Content-Type" => "application/json; charset=utf-8"
        ], json_encode([
            "code" => $code,
            "message" => $message,
            "data" => $data
        ], JSON_UNESCAPED_UNICODE));
    }
}
?>';
    }

    /**
     * Áç≤ÂèñAppController‰ª£Á¢º
     */
    private function getAppControllerCode(): string
    {
        return '<?php
/**
 * ÊáâÁî®APIÊéßÂà∂Âô®
 */

namespace app\api\controller;

use support\Request;
use support\Response;
use think\facade\Db;

class AppController
{
    /**
     * Áç≤ÂèñÊáâÁî®ÂàóË°®
     */
    public function list(Request $request): Response
    {
        try {
            $apps = Db::table("yc_app")
                ->where("status", 1)
                ->order("sort", "desc")
                ->order("id", "desc")
                ->select();

            // Â¶ÇÊûúÊ≤íÊúâÊáâÁî®ÔºåÂâµÂª∫ÈªòË™çÊáâÁî®
            if (empty($apps)) {
                $defaultApps = [
                    [
                        "title" => "AIÂä©Êâã",
                        "sub_title" => "Êô∫ËÉΩÂ∞çË©±Âä©Êâã",
                        "image" => "/static/images/app-ai.png",
                        "status" => 1,
                        "sort" => 100,
                        "create_time" => date("Y-m-d H:i:s"),
                        "update_time" => date("Y-m-d H:i:s")
                    ],
                    [
                        "title" => "Êï∏Â≠ó‰∫∫",
                        "sub_title" => "ËôõÊì¨Êï∏Â≠ó‰∫∫ÂΩ¢Ë±°",
                        "image" => "/static/images/app-avatar.png",
                        "status" => 1,
                        "sort" => 90,
                        "create_time" => date("Y-m-d H:i:s"),
                        "update_time" => date("Y-m-d H:i:s")
                    ]
                ];

                foreach ($defaultApps as $app) {
                    Db::table("yc_app")->insert($app);
                }

                $apps = Db::table("yc_app")
                    ->where("status", 1)
                    ->order("sort", "desc")
                    ->select();
            }

            return $this->jsonResponse(200, "Áç≤ÂèñÊàêÂäü", $apps);

        } catch (\Exception $e) {
            return $this->jsonResponse(500, "Áç≤ÂèñÂ§±Êïó: " . $e->getMessage());
        }
    }

    /**
     * Áµ±‰∏ÄJSONÈüøÊáâÊ†ºÂºè
     */
    private function jsonResponse(int $code, string $message, array $data = []): Response
    {
        return new Response(200, [
            "Content-Type" => "application/json; charset=utf-8"
        ], json_encode([
            "code" => $code,
            "message" => $message,
            "data" => $data
        ], JSON_UNESCAPED_UNICODE));
    }
}
?>';
    }
}
?>

